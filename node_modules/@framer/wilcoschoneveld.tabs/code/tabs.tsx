import * as React from "react";
import { PropertyControls, ControlType } from "framer";

const SContainer: React.CSSProperties = {
    height: "100%",
    overflow: "hidden"
};

const STabs: React.CSSProperties = {
    display: "flex",
    height: 50,
    width: "100%",
    boxShadow: "0px 0px 5px 0px rgba(0,0,0,0.75)",
    zIndex: -1
};

const STab: React.CSSProperties = {
    flex: 1,
    textAlign: "center",
    borderBottomStyle: "solid",
    borderBottomWidth: 2,
    padding: 15
};

const SContent: React.CSSProperties = {
    zIndex: -1,
    position: "relative",
    transition: "left 0.2s ease-out"
};

// Define type of property
interface Props {
    tabNames: string;
    amount: number;
    width: number;
    height: number;
    color: string;
    textColor: string;
    activeColor: string;
}

interface State {
    currentTab: number;
}

export class tabs extends React.Component<Props, State> {
    // Set default properties
    static defaultProps = {
        tabNames: "Dogs,Cats,Birds",
        color: "#6200EE",
        textColor: "#FFFFFF",
        activeColor: "#FFFFFF",
        amount: 2
    };

    // Items shown in property panel
    static propertyControls: PropertyControls = {
        tabNames: { type: ControlType.String, title: "Tab Names" },
        amount: { type: ControlType.Number, min: 1, max: 10, title: "# Tabs" },
        color: { type: ControlType.Color, title: "Primary" },
        textColor: { type: ControlType.Color, title: "Text" },
        activeColor: { type: ControlType.Color, title: "Active" }
    };

    state = {
        currentTab: 0
    };

    range = (x: number) => new Array(x).fill(null).map((_, i) => i);

    render() {
        // Clone child component(s) with width and height scaled to fit the tab content
        const scaledChildren = React.Children.map(this.props.children, (child: any) =>
            React.cloneElement(child, {
                width: this.props.amount * this.props.width,
                height: this.props.height - (STabs.height as number)
            })
        );

        const tabNames = this.props.tabNames.split(",");

        return (
            <div style={SContainer}>
                <div
                    style={{
                        ...STabs,
                        backgroundColor: this.props.color,
                        color: this.props.textColor
                    }}
                >
                    {this.range(this.props.amount).map(i => (
                        <div
                            style={{
                                ...STab,
                                borderColor: this.state.currentTab === i ? this.props.activeColor : this.props.color
                            }}
                            onClick={() => this.setState({ currentTab: i })}
                        >
                            {tabNames[i] || "..."}
                        </div>
                    ))}
                </div>
                <div style={{ ...SContent, left: -this.props.width * this.state.currentTab }}>{scaledChildren}</div>
            </div>
        );
    }
}
