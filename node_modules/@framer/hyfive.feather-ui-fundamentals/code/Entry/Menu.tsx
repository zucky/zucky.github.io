import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import { Divider } from "../Display/Divider";

const style: React.CSSProperties = {
  display: "flex",
  flexDirection: "column",
  textAlign: "center",
  overflow: "hidden",
  background: "var(--color-basefill)",
  padding: "10px 0 0",
  
};

// Define type of property
interface Props {
  item1: string;
  item2: string;
  itemRed: string;
  //   cancel: string;
  showDelete: boolean;
}

export class Menu extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    width: 375,
    height: 170,
    item0: "Item 1",
    item1: "Item 2",
    // itemRed: "Delete",
    // cancel: "Cancel"
    showDelete: false
  };

  // Items shown in property panel
  static propertyControls = (() => {
    let controls = {
      item0: { type: ControlType.String, title: "Item 1" },
      item1: { type: ControlType.String, title: "Item 2" },
    };

    for (let i = 2; i < 10; i++) {
      controls["item" + i] = {
        type: ControlType.String,
        title: "item " + (i + 1),
        hidden(props) {
          return !props["item" + (i - 1)];
        }
      };
    }

    controls["showDelete"] = {
        type: ControlType.Boolean, title: "Show Delete" 
    }

    return controls;
    
  })();

  render() {
    // styles

    const styles = {
      menuWrapper: {
        width: "100%",
        flexDirection: "column"
      },
      divider: {
        width: "100%",
        height: 10,
        background: "var(--color-basefill-gray)"
      },
      dividerWhite: {
        width: "100%",
        height: 10,
        background: "var(--color-basefill)"
      },
      itemDelete: {
        display: this.props.showDelete ? "flex" : "none",
        justifyContent: "center",
        alignItems: "center",
        height: 50,
        fontSize: 18,
        lingHeight: 1.5,
        color: "var(--color-warning)"
      },
      item: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        height: 50,
        fontSize: 18,
        lingHeight: 1.5,
        color: "var(--color-primary)"
      },
      itemGray: {
        fontSize: "var(--text-xxs)",
        lingHeight: 1.5,
        color: "var(--color-primary)",
        padding: 11,
        background: "var(--color-basefill-gray)"
      }
    };
    const menu = [],
      filledItems = [];

    for (let i = 0; i < 10; i++) {
      var menuItem = (
        <div
          style={{
            display: "flex",
            fontSize: 18,
            height: this.props["item" + i] ? 50 : 0,
            color: "var(--color-primary)",
            alignItems: "center",
            justifyContent: "center"
          }}
        >
          {this.props["item" + i]}
        </div>
      );
      menu.push(menuItem);
      if (this.props["item" + i]) {
        filledItems.push(menuItem);
      }
    }

    const menuWrapper = <div style={styles.menuWrapper}>{menu}</div>;
    var menuHeight = this.props.showDelete?filledItems.length * 50 + 120:filledItems.length * 50 + 70;
    return (
      <div style={style}>
        {menuWrapper}
        <div style={styles.itemDelete}>Delete</div>
        <div style={styles.divider} />
        <div style={styles.item}>Cancel</div>
        {/* <div style={styles.dividerWhite} /> */}
        <div style={styles.itemGray}>
         BottomSheet Distance â†’ iPhone 8 : {menuHeight}, iPhone X : {menuHeight+34}
        </div>
      </div>
    );
  }
}
