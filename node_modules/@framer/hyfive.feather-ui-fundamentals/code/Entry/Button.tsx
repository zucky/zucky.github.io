import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import "../styles/button.css";

// Define type of property
interface Props {
  text: string;
  type: string;
  size: string;
  status: string;
  inline: string;
  theme: string;
}

export class Button extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    text: "Feather UI",
    type: "type-filled",
    size: "size-l",
    status: "status-normal",
    inline: "inline-false",
    theme: "theme-color-brand",
    width: 375,
    height: 64
  };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    text: { type: ControlType.String, title: "Text" },
    type: {
      type: ControlType.SegmentedEnum,
      options: ["type-filled", "type-outlined"],
      optionTitles: ["Filled", "Outlined"],
      title: "Type"
    },

    size: {
      type: ControlType.SegmentedEnum,
      options: ["size-l", "size-m", "size-s"],
      optionTitles: ["L", "M", "S"],
      title: "Size"
    },
    inline: {
      type: ControlType.SegmentedEnum,
      options: ["inline-true", "inline-false"],
      optionTitles: ["True", "False"],
      title: "Inline"
    },
    theme: {
      type: ControlType.Enum,
      options: [
        "theme-color-brand",
        "theme-color-action",
        "theme-color-warning"
      ],
      optionTitles: ["Brand", "Action", "Warning"],
      title: "Theme"
    },
    status: {
      type: ControlType.SegmentedEnum,
      options: ["status-normal", "status-pressed"],
      optionTitles: ["Normal", "Pressed"],
      title: "Status"
    }
  };
  render() {
    var themeStyle;
    if (this.props.type == "type-filled") {
      themeStyle = this.props.theme;
    } else if (this.props.type == "type-outlined") {
      themeStyle = this.props.theme + "-outlined";
    }
    return (
      <div
        style={{
          height: "100%",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          color: "#8855FF",
          overflow: "hidden",
          // background: "white",
          padding: this.props.inline != "inline-false" ? "0px" : "0px 20px"
        }}
      >
        <div
          className={`${this.props.type} ${this.props.size} ${
            this.props.status
          } ${this.props.inline} ${themeStyle} `}
        >
          {this.props.text}
        </div>
      </div>
    );
  }
}
