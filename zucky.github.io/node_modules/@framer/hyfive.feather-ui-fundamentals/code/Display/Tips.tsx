import * as React from "react";
import { PropertyControls, ControlType } from "framer";

const style: React.CSSProperties = {
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  fontSize: "var(--text-s)",
  lineHeight: 1.4
};

// Define type of property
interface Props {
  direction: string;
  position: string;
  text: string;
  color: string;
}

export class Tips extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    width: 19,
    height: 19,
    direction: "left",
    position: "center",
    text: "Tips goes here :)",
    color: "action"
  };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    direction: {
      type: ControlType.SegmentedEnum,
      options: ["bottom", "top", "right", "left"],
      optionTitles: ["↑", "↓", "←", "→"],
      title: "Direction"
    },
    position: {
      type: ControlType.SegmentedEnum,
      options: ["start", "center", "end"],
      optionTitles: ["Start", "Center", "End"],
      title: "Position"
    },
    text: { type: ControlType.String, title: "Text" },
    color: {
      type: ControlType.SegmentedEnum,
      options: ["brand", "action"],
      optionTitles: ["Brand", "Action"],
      title: "Color"
    }
  };

  render() {
    const styles = {
      pop: {
        display: "flex",
        position: "absolute",
        padding: "12px 20px",

        borderRadius: "var(--radius-m)",
        background:
          this.props.color == "brand"
            ? "var(--color-brand)"
            : "var(--color-action)",
        ...(this.props.direction == "left"
          ? { right: "50%" }
          : this.props.direction == "right"
          ? { left: "50%" }
          : this.props.direction == "top"
          ? { bottom: "50%" }
          : { top: "50%" }),

        ...(this.props.position == "start" &&
        (this.props.direction == "top" || this.props.direction == "bottom")
          ? { left: "-50%" }
          : this.props.position == "end" &&
            (this.props.direction == "top" || this.props.direction == "bottom")
          ? { right: "-50%" }
          : this.props.position == "start" &&
            (this.props.direction == "left" || this.props.direction == "right")
          ? { top: "-50%" }
          : this.props.position == "end" &&
            (this.props.direction == "left" || this.props.direction == "right")
          ? { bottom: "-50%" }
          : {})
      },

      arrow: {
        display: "flex",
        position: "absolute",
        background:
          this.props.color == "brand"
            ? "var(--color-brand)"
            : "var(--color-action)",
        width: 14,
        height: 14,
        ...(this.props.direction == "top"
          ? { borderRadius: "0 0 2px 0" }
          : this.props.direction == "right"
          ? { borderRadius: "0 0 0 2px" }
          : this.props.direction == "bottom"
          ? { borderRadius: "2px 0 0 0" }
          : { borderRadius: "0 2px 0 0" }),
        // top: 0,
        // bottom: 0,
        // left: 0,
        // right: 0,
        // margin: "auto",
        transform: "rotate(45deg) "
      },
      arrowWrapper: {
        display: "flex",
        position: "relative",
        alignItems: "center",
        justifyContent: "center",
        fontSize: "var(--text-s)",
        filter: "drop-shadow(0 1px 4px rgba(0,0,0,.1))",

        width: 19,
        height: 19,
        color: "var(--color-basefill)"
        // background: "rgb(136, 85, 255)"
      }
    };

    let pop = (
      <div style={styles.pop}>
        <div
          style={{
            display: "flex",
            position: "relative",
            maxWidth: "11em",
            width: "max-content"
          }}
        >
          {this.props.text}
        </div>
      </div>
    );

    let tip = (
      <div style={styles.arrowWrapper}>
        <div style={styles.arrow} />
        {pop}
      </div>
    );

    return <div style={style}>{tip}</div>;
  }
}
