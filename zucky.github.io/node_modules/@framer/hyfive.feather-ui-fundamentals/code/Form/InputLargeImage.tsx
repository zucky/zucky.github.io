import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import "../styles/style-index.css";

// Define type of property
interface Props {
  number: string;
  desc1: string;
  desc2: string;
}

export class InputLargeImage extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    number: "2",
    width: 375,
    height: 140
  };

  // Items shown in property panel
  static propertyControls = (() => {
    let controls = {
      number: {
        type: ControlType.SegmentedEnum,
        options: ["1", "2"],
        optionTitles: ["1 / h244", "2 / h140"],
        title: "Number"
      },

      desc1: {
        type: ControlType.String,
        title: "Desc 1"
      }
    };

    controls["desc2"] = {
      type: ControlType.String,
      title: "Desc 2",
      hidden(props) {
          return props.number == "1";
      }
    };
    return controls;
  })();

  svg = (
    <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26">
      <path
        d="M 12.2 12.2 L 0.2 12.2 L 0.2 13.8 L 12.2 13.8 L 12.2 25.8 L 13.8 25.8 L 13.8 13.8 L 25.8 13.8 L 25.8 12.2 L 13.8 12.2 L 13.8 0.2 L 12.2 0.2 Z"
        fill="rgba(0, 0, 0, 0.54)"
      />
    </svg>
  );

  

  render() {

    const styles = {
        style: {
          height: this.props.number=="2"?140:244,
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "center",
          color: "var(--color-primary)",
          background: "white",
          padding: 20,
          overflow: "hidden",
          fontSize: "var(--text-s)"
        },
        desc: {
          paddingTop: 8,
          lineHeight: 1.5
        },


        // box 背景色暂时使用 ink 1 的 50%；

        box: {
          display: "inline-flex",
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          background: "#F6F7F9",
          borderRadius: "var(--radius-m)",
          width: "100%",
          height: "100%"
        },
        twoBoxWrapper: {
          display: "grid",
          gridAutoFlow: "column",
          gap: 10,
          width: "100%",
          height: "100%"
        }
      };
      


    const one = (
      <div style={styles.box}>
        {this.svg}
        <div style={styles.desc}>{this.props.desc1}</div>
      </div>
    );

    const two = (
      <div style={styles.twoBoxWrapper}>
        <div style={styles.box}>
          {this.svg}
          <div style={styles.desc}>{this.props.desc1}</div>
        </div>
        <div style={styles.box}>
          {this.svg}
          <div style={styles.desc}>{this.props.desc2}</div>
        </div>
      </div>
    );

    return <div style={styles.style}>{this.props.number == "1" ? one : two}</div>;
  }
}

