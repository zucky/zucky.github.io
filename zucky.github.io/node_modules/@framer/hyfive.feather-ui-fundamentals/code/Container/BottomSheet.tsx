import * as React from "react";
import {
  PropertyControls,
  ControlType,
} from "framer";

const style: React.CSSProperties = {
  height: "100%",
  display: "flex",
  position: "relative",
  color: "#8855FF",
  background: "rgba(0, 0, 0, 0.4)",
  overflow: "hidden"
};

// Define type of property
interface Props {
  from: string;
  distance: number;
  height: number;
  grabberDirection: string;
  closeButton: string;
}

export class BottomSheet extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    from: "bottom",
    distance: 300,
    height: 667,
    width: 375,
    grabberDirection: "none",
    closeButton: "on"
  };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    from: {
      type: ControlType.SegmentedEnum,
      options: ["top", "bottom"],
      optionTitles: ["￣", "＿"],
      title: "From"
    },

    distance: {
      type: ControlType.Number,
      max: 1000,
      min: 0,
      title: "Distance"
    },

    grabberDirection: {
      type: ControlType.SegmentedEnum,
      options: ["up", "flat", "down", "none"],
      optionTitles: ["↑", "-", "↓", "OFF"],
      title: "Grabber"
    },

    closeButton: {
      type: ControlType.SegmentedEnum,
      options: ["on", "off"],
      optionTitles: ["ON", "OFF"],
      title: "⨂"
    }
  };

  render() {
    // convert SheetBottom positon refer to either top or bottom
    var { from, distance } = this.props;
    if (from == "bottom") {
      distance = -this.props.height + distance;
    }

    // decide which svg to fill
    var grabberFill,
      grabberNotFill,
      grabberFillUp,
      grabberFillFlat,
      grabberFillDown;
    grabberFill = "hsla(0, 0%, 0%, 0.2)";
    grabberNotFill = "hsla(0, 0%, 0%, 0)";

    grabberFillUp = grabberNotFill;
    grabberFillFlat = grabberNotFill;
    grabberFillDown = grabberNotFill;

    if (this.props.grabberDirection == "up") {
      grabberFillUp = grabberFill;
    } else if (this.props.grabberDirection == "flat") {
      grabberFillFlat = grabberFill;
    } else if (this.props.grabberDirection == "down") {
      grabberFillDown = grabberFill;
    } else if (this.props.grabberDirection == "none") {
      grabberFillUp = grabberNotFill;
      grabberFillFlat = grabberNotFill;
      grabberFillDown = grabberNotFill;
    }

    // close button fill

    var closeButtonFill, closeButtonFillX;
    if (this.props.closeButton == "on") {
      closeButtonFill = "rgba(0,0,0,.06)";
      closeButtonFillX = "#959595"
    } else {
      closeButtonFill = "transparent";
      closeButtonFillX = "transparent"
    }

    // styles
    const styles = {
      top: {
        width: "100%",
        height: "100%",
        position: "relative",
        borderRadius: "12px 12px 0px 0px",
        overflow: "hidden",
        boxShadow: "0px 2px 8px rgba(0,0,0,.1)",
        background: "white",
        zIndex: 1,
        top: distance
      },

      bottom: {
        width: "100%",
        height: "100%",
        position: "relative",
        borderRadius: "12px 12px 0px 0px",
        overflow: "hidden",
        boxShadow: "0px 2px 8px rgba(0,0,0,.1)",
        background: "white",
        zIndex: 1,
        bottom: distance
      },

      grabber: {
        position: "absolute",
        left: 0,
        right: 0,
        top: 2,
        margin: "0 auto"
      },

      closeButton: {
        position: "absolute",
        right: 20,
        top: 20,
      }
    };

    var sheetBottomStyle;
    sheetBottomStyle = styles[this.props.from];

    return (
      <div style={style}>
        <div style={sheetBottomStyle}>
          {this.props.children}

          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="40"
            height="16"
            style={styles.grabber}
          >
            <path
              d="M 8 7 L 20 12 L 32 7"
              fill="transparent"
              stroke-width="4"
              stroke={grabberFillDown}
              stroke-linecap="round"
              stroke-linejoin="round"
            />
          </svg>
          {/* GrabberFlat */}
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="40"
            height="16"
            style={styles.grabber}
          >
            <path
              d="M 8 8 L 32 8"
              fill="transparent"
              stroke-width="4"
              stroke={grabberFillFlat}
              stroke-linecap="round"
            />
          </svg>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="40"
            height="16"
            style={styles.grabber}
          >
            <path
              d="M 8 9 L 20 3 L 32 9"
              fill="transparent"
              stroke-width="4"
              stroke={grabberFillUp}
              stroke-linecap="round"
              stroke-linejoin="round"
            />
          </svg>
          {/* close button */}
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" style={styles.closeButton}>
            <g>
              <path
                d="M 12 24 C 5.373 24 0 18.627 0 12 C 0 5.373 5.373 0 12 0 C 18.627 0 24 5.373 24 12 C 24 18.627 18.627 24 12 24 Z"
                fill={closeButtonFill}
              />
            </g>
            <g transform="translate(8 8)">
              <path
                d="M 0 0 L 8 8"
                fill="transparent"
                stroke-width="2"
                stroke={closeButtonFillX}
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M 8 0 L 0 8"
                fill="transparent"
                stroke-width="2"
                stroke={closeButtonFillX}
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </g>
          </svg>
        </div>
      </div>
    );
  }
}
