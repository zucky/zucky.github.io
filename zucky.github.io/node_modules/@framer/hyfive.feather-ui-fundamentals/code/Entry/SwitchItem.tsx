import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import { Switch } from "./Switch";

const style: React.CSSProperties = {
  height: "100%",
  justifyContent: "centr",
  color: "#8855FF",
  background: "rgba(136, 85, 255, 0.1)",
  overflow: "hidden"
};

// Define type of property
interface Props {
  text: string;
  explainer: string;
  state: string;
  disabled: boolean;

}

export class SwitchItem extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    text: "Switch",
    state: "on",
    explainer: "",
    height: 62,
    width: 375,
    disabled: false;
  };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    text: { type: ControlType.String, title: "Text" },
    explainer: { type: ControlType.String, title: "Description" },

    state: {
      type: ControlType.SegmentedEnum,
      options: ["on", "off"],
      optionTitles: ["On", "Off"],
      title: "State"
    },
    disabled: {
      type: ControlType.Boolean,
      title: "Disabled"
    }
  };

  render() {

    const styles = {
      style: {
        display: "flex",
        alignItems: "center",
        padding: "16px 20px",
        background: "var(--color-basefill)",
        justifyContent: "space-between",
        fontSize: "var(--text-l)",
        color: "var(--color-primary)",
        lineHeight: 1.5,
      },
    
      styleWithExplainer:{
        display: "flex",
        padding: "16px 20px",
        background: "var(--color-basefill)",
        justifyContent: "space-between",
        fontSize: "var(--text-l)",
        color: "var(--color-primary)",
        lineHeight: 1.5,
      },
    
      listText:{
          display: "inline-flex",
          flexDirection: "column",
          color: (this.props.disabled == false)? "var(--color-primary)" : "var(--color-weak)",
      },
      explainer:{
        fontSize: "var(--text-s)",
        color: (this.props.disabled == false)? "var(--color-secondary)":"var(--color-weak)",
        fontWeight: 200,
        
    }
    };

    var styleList;
    if(this.props.explainer !==""){

        styleList = styles.styleWithExplainer;
    } else {
        styleList = styles.style;
    }



    return (
      <div style={styleList}>
        <div style={styles.listText}><div>{this.props.text}</div><div style={styles.explainer}>{this.props.explainer}</div></div>
        <Switch state = {this.props.state} disabled={this.props.disabled}/>
      </div>
    );
  }
}


