import * as React from "react";
import { PropertyControls, ControlType } from "framer";

const style: React.CSSProperties = {
  height: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  textAlign: "center",
  color: "#8855FF"
  //   background: "white",
};

// Define type of property
interface Props {
  type: string;
  value: number;
  min: number;
  max: number;
  showPop: boolean;
  minValue: number;
  maxValue: number;
}

export class Slider extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    width: 311,
    height: 30,
    type: "single",
    seg: 0,
    min: 0,
    max: 100,
    value: 37,
    minValue: 20,
    maxValue: 80,
    showPop: true,
  };

  // Items shown in property panel
  static propertyControls = (() => {
    let controls = {
      type: {
        type: ControlType.SegmentedEnum,
        options: ["single", "double"],
        optionTitles: ["Single", "Double"],
        title: "Type"
      },
      min: {
        type: ControlType.Number,
        title: "Min"
      },
      max: {
        type: ControlType.Number,
        title: "Max",
        max: 1000
      },
      value: {
        type: ControlType.Number,
        title: "Value",
        hidden(props) {
          return !(props.type == "single");
        }
      },
      minValue: {
        type: ControlType.Number,
        title: "From",
        hidden(props) {
          return !(props.type == "double");
        }
      },
      maxValue: {
        type: ControlType.Number,
        title: "To",
        hidden(props) {
          return !(props.type == "double");
        }
      },
      showPop: {
        type: ControlType.Boolean,
        title: "Show Pop",
        hidden(props) {
          return !(props.type == "single");
        }
      }
    };

    return controls;
  })();

  render() {
    var knobLeftPosition =
      (this.props.value / (this.props.max - this.props.min)) * 100 + "%";
    var duoLeft =
      (this.props.minValue / (this.props.max - this.props.min)) * 100 + "%";
    var duoRight =
      ((this.props.maxValue - this.props.minValue) /
        (this.props.max - this.props.min)) *
        100 +
      "%";

    const single = (
      <div
        style={{
          width: "100%",
          padding: "0px 0px"
        }}
      >
        <div
          style={{
            display: "flex",
            position: "relative",
            width: "100%",
            height: 2,
            background: "#e0e0e0",
            borderRadius: 4
          }}
        >
          <div
            style={{
              display: "flex",
              position: "relative",
              width: knobLeftPosition,
              height: 2,
              background: "#547EFF",
              borderRadius: 4,
            }}
          >


<div
            style={{
              position: "absolute",
              top: "-11px",
              // left: knobLeftPosition,
              right: -24,
              width: 24,
              height: 24,
              transition:"all 0.5s ease-out"
            }}
          >
            <div
              style={{
                // arrow
                display: !this.props.showPop ? "none" : "flex",
                position: "absolute",
                background: "var(--color-brand)",
                width: 15,
                height: 15,
                transform: "translateY(-29px) translateX(-7px) rotate(45deg)",
                borderRadius: 2
              }}
            />
            <div
              style={{
                // knob
                display: "flex",
                position: "absolute",
                left: -11,
                width: 24,
                height: 24,
                borderRadius: 12,
                background: "white",
                boxShadow: "0px 2px 8px rgba(0,0,0,.1)"
              }}
            />
            <div
              style={{
                // bubble
                display: !this.props.showPop ? "none" : "flex",
                
                position: "absolute",
                padding: "2px 12px",
                top: -45,
                color: "white",
                borderRadius: 30,
                lineHeight: 1.5,
                transform: "translateX(-50%)",

                background: "#547EFF"
              }}
            >
              {this.props.value}
            </div>
          </div>
          
          </div>
     
        </div>
      </div>
    );
    const double = (
      <div
        style={{
          width: "100%",
          padding: "0px 0px"
        }}
      >
        <div
          style={{
            display: "flex",
            position: "relative",
            width: "100%",
            height: 2,
            background: "#e0e0e0",
            borderRadius: 4
          }}
        >
          <div
            style={{
              display: "flex",
              position: "absolute",
              width: duoRight,
              left: duoLeft,
              height: 2,
              background: "#547EFF",
              borderRadius: 4
            }}
          >
            {/* knob */}
            <div style={leftKnobStyle} />
            <div style={rightKnobStyle} />
          </div>
        </div>
      </div>
    );

    return (
      <div style={style}>{this.props.type == "single" ? single : double}</div>
    );
  }
}

const leftKnobStyle = {
  position: "absolute",
  width: 24,
  height: 24,
  background: "white",
  borderRadius: 12,
  top: -11,
  left: -11,
  boxShadow: "0px 2px 8px rgba(0,0,0,.2)"
};

const rightKnobStyle = {
  position: "absolute",
  width: 24,
  height: 24,
  background: "white",
  borderRadius: 12,
  top: -11,
  right: -11,
  boxShadow: "0px 2px 8px rgba(0,0,0,.2)"
};
