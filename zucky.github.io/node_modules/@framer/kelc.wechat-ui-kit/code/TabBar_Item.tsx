import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import styled from "styled-components";
import { WeChat_Icons_icon_chat_on, WeChat_Icons_icon_chat_off, WeChat_Icons_icon_contacts_on, WeChat_Icons_icon_contacts_off, WeChat_Icons_icon_discover_on, WeChat_Icons_icon_discover_off, WeChat_Icons_icon_me_on, WeChat_Icons_icon_me_off } from "./canvas";
import { freeSpaceFromProps } from "framer/types/src/render/DesignComponentWrapper";

const TabBarItemGroup = styled.div`
    width: 64px;
    height: 32px;
    display: grid;
    grid-template-rows: 1fr;
    justify-content: center;

    p {
        font-size: 10px;
        text-align: center;
        margin: 0;
        color: ${props => props.color};
    }
`

const TabBarItemIcon = styled.div`
    width: 64px;
    height: 32px;
    padding: 0 16px 0 16px;
    margin-bottom: 1px;
`

// Define type of property
interface Props {
    tabType: "chats" | "contacts" | "discover" | "me";
    isCheck: boolean;
}

export class TabBar_Item extends React.Component<Props> {

    // Set default properties
    static defaultProps = {
        tabType: "chats",
        isCheck: true
    }

    // Items shown in property panel
    static propertyControls: PropertyControls = {
        tabType: { 
            type: ControlType.Enum, 
            options: ["chats", "contacts", "discover", "me"],
            optionTitles: ["Chats", "Contacts", "Discover", "Me"],
            title: "Tab Type"
        },
        isCheck: { type: ControlType.Boolean, disabledTitle: "Off", enabledTitle: "On", title: "Tab Status" }
    }

    render() {
        const tabNames = ["Chats", "Contacts", "Discover", "Me"];
        const tabNameColor = this.props.isCheck ? "#00AF01" : "#9A9A9A";
        switch (this.props.tabType) {
            case "chats":
                return (
                    <TabBarItemGroup color={tabNameColor}>
                        <TabBarItemIcon>
                            { this.props.isCheck ? <WeChat_Icons_icon_chat_on /> : <WeChat_Icons_icon_chat_off /> }
                        </TabBarItemIcon>
                        <p>{tabNames[0]}</p>
                    </TabBarItemGroup>
                )
                break;
            case "contacts":
                return (
                    <TabBarItemGroup color={tabNameColor}>
                        <TabBarItemIcon>
                            { this.props.isCheck ? <WeChat_Icons_icon_contacts_on /> : <WeChat_Icons_icon_contacts_off /> }
                        </TabBarItemIcon>
                        <p>{tabNames[1]}</p>
                    </TabBarItemGroup>
                )
                break;
            case "discover":
                return (
                    <TabBarItemGroup color={tabNameColor}>
                        <TabBarItemIcon>
                            { this.props.isCheck ? <WeChat_Icons_icon_discover_on /> : <WeChat_Icons_icon_discover_off /> }
                        </TabBarItemIcon>
                        <p>{tabNames[2]}</p>
                    </TabBarItemGroup>
                )
                break;
            case "me":
                return (
                    <TabBarItemGroup color={tabNameColor}>
                        <TabBarItemIcon>
                            { this.props.isCheck ? <WeChat_Icons_icon_me_on /> : <WeChat_Icons_icon_me_off /> }
                        </TabBarItemIcon>
                        <p>{tabNames[3]}</p>
                    </TabBarItemGroup>
                )
                break;
        
            default:
                break;
        }
        return (
            <TabBarItemGroup>
                Error...
            </TabBarItemGroup>
        )
    }
}
