import { Data, animate, Override, Animatable } from "framer"
import { Curve } from "framer/types/src/animation/Animators/BezierAnimator"

const data = Data({ scale: Animatable(1) })

export const Scale: Override = () => {
    return {
        scale: data.scale,
        onTap() {
            data.scale.set(0.6)
            animate.spring(data.scale, 1)
        },
    }
}

// Toggle Sub Menu
const springOptions = { tension: 500, friction: 30 }

const menu = Data({ 
    leftBottom: Animatable(0),
    midBottom: Animatable(0),
    rightBottom: Animatable(0),
    showLeft: false,
    showMid: false,
    showRight: false
 })
let leftMenuHeight = 0;
let midMenuHeight = 0;
let rightMenuHeight = 0;

export const leftMenuBtn: Override = () => {
    return {
        onTap() {
            if(menu.showLeft) {
                const newBtm = -leftMenuHeight;
                console.log(leftMenuHeight);
                animate.spring(menu.leftBottom,  newBtm, springOptions);
                menu.showLeft = false;
            } else {
                animate.spring(menu.leftBottom, 90, springOptions);
                menu.showLeft = true;
            }
        },
    }
}

export const leftSubMenu: Override = props => {
    leftMenuHeight = props.height;
    menu.leftBottom.set(-leftMenuHeight);
    return {
        bottom: menu.leftBottom
    }
}

export const midMenuBtn: Override = () => {
    return {
        onTap() {
            if(menu.showMid) {
                const newBtm = -midMenuHeight;
                console.log(midMenuHeight);
                animate.spring(menu.midBottom,  newBtm, springOptions);
                menu.showMid = false;
            } else {
                animate.spring(menu.midBottom, 90, springOptions);
                menu.showMid = true;
            }
        },
    }
}

export const midSubMenu: Override = props => {
    midMenuHeight = props.height;
    menu.midBottom.set(-midMenuHeight);
    return {
        bottom: menu.midBottom
    }
}

export const rightMenuBtn: Override = () => {
    return {
        onTap() {
            if(menu.showRight) {
                const newBtm = -rightMenuHeight;
                console.log(rightMenuHeight);
                animate.spring(menu.rightBottom,  newBtm, springOptions);
                menu.showRight = false;
            } else {
                animate.spring(menu.rightBottom, 90, springOptions);
                menu.showRight = true;
            }
        },
    }
}

export const rightSubMenu: Override = props => {
    rightMenuHeight = props.height;
    menu.rightBottom.set(-rightMenuHeight);
    return {
        bottom: menu.rightBottom
    }
}

// Switch Tool Bar
const bezierCurve = [0.2, 0.8, 0.2, 1] as Curve
const duration = 0.6
const bezierOptions = { curve: bezierCurve, duration }

const toolBar = Data({ 
    menuBottom: Animatable(0),
    inputBottom: Animatable(-90),
    showMenu: true,
})

export const SwitchBtn: Override = () => {
    return {
        onTap() {
            if (toolBar.showMenu) {
                animate.bezier(toolBar.menuBottom, -90, bezierOptions);
                animate.bezier(toolBar.inputBottom, 0, bezierOptions);
                toolBar.showMenu = false;
            } else {
                animate.bezier(toolBar.inputBottom, -90, bezierOptions);
                animate.bezier(toolBar.menuBottom, 0, bezierOptions);
                toolBar.showMenu = true;
            }
        },
    }
}

export const MenuBar: Override = () => {
    return {
        bottom: toolBar.menuBottom
    }
}

export const inputBar: Override = () => {
    return {
        bottom: toolBar.inputBottom
    }
}