import * as React from "react";
import { PropertyControls, ControlType } from "framer";

interface Props {
  width: number;
  height: number;
  hasAvatar: boolean;
  img: string;
  initials: string;
  color: string;
  text: string;
  gender: boolean;
  rating: number;
  cornerRadius: number;
}

export class TinyFaces extends React.Component<Props> {
  static defaultProps = {
    width: 50,
    height: 50,
    hasAvatar: true,
    gender: true,
    img: null,
    rating: 30,
    cornerRadius: 100,
    initials:
      String.fromCharCode(65 + Math.floor(Math.random() * 26)) +
      String.fromCharCode(65 + Math.floor(Math.random() * 26)),
    color: "#09F",
    text: "#FFF"
  };

  state = { img: null, initials: "KR" };

  static propertyControls: PropertyControls<Props> = {
    hasAvatar: {
      type: ControlType.Boolean,
      enabled: "Avatar",
      disabled: "Initials",
      title: "Type"
    },
    gender: {
      type: ControlType.Boolean,
      enabled: "Male",
      disabled: "Female",
      title: "Gender"
    },
    rating: { type: ControlType.Number, title: "Min Rating" },
    cornerRadius: { type: ControlType.Number, title: "Corners" },
    initials: { type: ControlType.String, title: "Initials" },
    color: { type: ControlType.Color, title: "Color" },
    text: { type: ControlType.Color, title: "Text" }
  };

  componentDidMount() {
    this.getImages();
  }

  componentDidUpdate(prevProps: Props) {
    if (
      prevProps.gender !== this.props.gender ||
      prevProps.rating !== this.props.rating
    ) {
      this.getImages();
    }
  }

  loadingView(width, height) {
    return (
			<div
				style={{
					width: this.props.width,
					height: this.props.height,
					position: "absolute",
				}}
			>
      <svg width={width} height={height} viewBox="0 0 602 602">
        <g fill="none">
          <path fill="#FFCA00" d="M.653 601.628h600.661v-600.952h-600.661z" />
          <path
            d="M173.94 199.048v-7.696c0-48.7 39.2-85.656 87.883-85.656h82.116c48.677 0 86.594 36.956 86.594 85.656v1.861l-256.593 5.834z"
            fill="#140D43"
          />
          <path
            d="M483.018 601.628h-361.563v-109.968c0-36.355 32.167-65.066 68.504-65.066h225.843c36.337 0 67.216 28.711 67.216 65.066v109.968z"
            fill="#FD5A47"
          />
          <path
            d="M296.884 473.269h11.99c22.458 0 40.017-21.01 40.017-43.479v-44.039h-93.307v44.039c0 22.469 18.842 43.479 41.3 43.479"
            fill="#EF8D4D"
          />
          <path
            d="M418.869 309.903h25.537c15.384 0 26.948-12.194 26.948-27.585v1.47c0-15.391-11.564-26.395-26.948-26.395h-25.537v52.51z"
            fill="#FCA87B"
          />
          <path
            d="M322.252 409.09h-46.566c-56.34 0-101.745-48.251-101.745-104.612v-111.264h256.593v103.44c0 60.684-47.627 112.436-108.282 112.436"
            fill="#FCA87B"
          />
          <path
            d="M185.603 309.903h-25.718c-14.439 0-26.767-11.92-26.767-26.366v.006c0-14.446 12.328-26.15 26.767-26.15h25.718v52.51z"
            fill="#FCA87B"
          />
          <path
            d="M273.078 269.062c0 3.221-2.613 5.834-5.832 5.834h-34.99c-3.219 0-5.832-2.614-5.832-5.834 0-3.221 2.613-5.834 5.832-5.834h34.99c3.219 0 5.832 2.614 5.832 5.834"
            fill="#2D160F"
          />
          <path
            d="M260.478 295.845c0 6.85-5.552 12.41-12.404 12.41-6.846 0-12.398-5.56-12.398-12.41 0-6.85 5.552-12.41 12.398-12.41 6.852 0 12.404 5.56 12.404 12.41"
            fill="#603A17"
          />
          <path
            d="M378.048 269.062c0 3.221-2.613 5.834-5.832 5.834h-34.99c-3.219 0-5.832-2.614-5.832-5.834 0-3.221 2.613-5.834 5.832-5.834h34.99c3.219 0 5.832 2.614 5.832 5.834"
            fill="#2D160F"
          />
          <path
            d="M370.083 295.845c0 6.85-5.552 12.41-12.404 12.41-6.846 0-12.398-5.56-12.398-12.41 0-6.85 5.552-12.41 12.398-12.41 6.852 0 12.404 5.56 12.404 12.41"
            fill="#603A17"
          />
          <path
            d="M318.345 338.826c0 8.548-6.922 15.473-15.466 15.473-8.543 0-15.466-6.926-15.466-15.473"
            fill="#fff"
          />
          <path
            d="M308.068 288.794l9.278 23.583c1.551 3.705-1.172 9.195-5.19 9.195h-18.556c-4.018 0-6.741-5.49-5.19-9.195l9.278-22.883c1.93-4.609 8.456-5.309 10.38-.7"
            fill="#EF8D4D"
          />
          <path
            d="M383.725 336.303c0 9.067-7.348 16.418-16.41 16.418-9.062 0-16.404-7.351-16.404-16.418s7.342-16.418 16.404-16.418c9.062 0 16.41 7.351 16.41 16.418"
            fill="#EF8D4D"
          />
          <path
            d="M260.851 336.303c0 9.067-7.348 16.418-16.41 16.418-9.062 0-16.404-7.351-16.404-16.418s7.342-16.418 16.404-16.418c9.062 0 16.41 7.351 16.41 16.418"
            fill="#EF8D4D"
          />
          <path
            d="M430.533 263.228h.805c-23.432 0-41.626-20.409-41.626-43.852v-43.665h40.822v87.517z"
            fill="#140D43"
          />
          <path
            d="M173.94 263.228h-.805c23.432 0 41.626-20.409 41.626-43.852v-31.996h-40.822v75.848z"
            fill="#140D43"
          />
          <path
            d="M173.94 222.386h159.368c29.316 0 50.572-23.781 50.572-53.111v-5.234h-157.111c-29.322 0-52.829 23.781-52.829 53.111v5.234z"
            fill="#140D43"
          />
          <path
            d="M418.046 200.778l-60.218-60.247c-17.868-17.877-17.868-46.857 0-64.734l60.218 60.253c17.868 17.871 17.868 46.851 0 64.728z"
            fill="#140D43"
          />
          <path
            d="M373.929 201.331l-60.218-60.247c-17.868-17.877-17.868-46.857 0-64.734l60.218 60.253c17.868 17.871 17.868 46.851 0 64.728z"
            fill="#140D43"
          />
          <path fill="#FCA87B" d="M121.455 601.628h75.812v-35.007h-75.812z" />
          <path fill="#FCA87B" d="M418.869 601.628h64.148v-35.007h-64.148z" />
        </g>
      </svg>
		</div>
    );
  }

  getImages() {
    const gender = this.props.gender === true ? "male" : "female";
    const quality = Math.round(this.props.rating / 10);
    const url = `https://tinyfac.es/api/users/?gender=${gender}&min_quality=${quality}&amount=1`;

    fetch(url)
      .then(response => response.json())
      .then(data => this.setState({ img: data[0]["avatars"][3]["url"] }));
  }

  render() {
    const loading = this.loadingView(this.props.width, this.props.height);
    return (
      <div
        style={{
          width: this.props.width,
          height: this.props.height,
          backgroundColor: this.props.color,
          backgroundImage: this.props.hasAvatar
            ? `url(${this.state.img})`
            : `none`,
          backgroundSize: "cover",
          backgroundPosition: "center top",
          backgroundRepeat: "no-repeat",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          overflow: "hidden",
					position: "relative"
          borderRadius: `${this.props.cornerRadius / 2}%`
        }}
      >
				{ this.state.img === null && loading}
        <div
          style={{
            visibility: this.props.hasAvatar ? "hidden" : "visible",
            fontSize: "16px",
            fontWeight: 700,
            textTransform: "uppercase",
            color: this.props.text,
            textAlign: "center",
            position: "relative"
          }}
        >
          <p>{this.props.initials}</p>
        </div>
      </div>
    );
  }
}
